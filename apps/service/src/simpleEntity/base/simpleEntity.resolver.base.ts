/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSimpleEntityArgs } from "./CreateSimpleEntityArgs";
import { UpdateSimpleEntityArgs } from "./UpdateSimpleEntityArgs";
import { DeleteSimpleEntityArgs } from "./DeleteSimpleEntityArgs";
import { SimpleEntityCountArgs } from "./SimpleEntityCountArgs";
import { SimpleEntityFindManyArgs } from "./SimpleEntityFindManyArgs";
import { SimpleEntityFindUniqueArgs } from "./SimpleEntityFindUniqueArgs";
import { SimpleEntity } from "./SimpleEntity";
import { DifferentEntityFindManyArgs } from "../../differentEntity/base/DifferentEntityFindManyArgs";
import { DifferentEntity } from "../../differentEntity/base/DifferentEntity";
import { SimpleEntityService } from "../simpleEntity.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SimpleEntity)
export class SimpleEntityResolverBase {
  constructor(
    protected readonly service: SimpleEntityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SimpleEntity",
    action: "read",
    possession: "any",
  })
  async _simpleEntitiesMeta(
    @graphql.Args() args: SimpleEntityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SimpleEntity])
  @nestAccessControl.UseRoles({
    resource: "SimpleEntity",
    action: "read",
    possession: "any",
  })
  async simpleEntities(
    @graphql.Args() args: SimpleEntityFindManyArgs
  ): Promise<SimpleEntity[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SimpleEntity, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SimpleEntity",
    action: "read",
    possession: "own",
  })
  async simpleEntity(
    @graphql.Args() args: SimpleEntityFindUniqueArgs
  ): Promise<SimpleEntity | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SimpleEntity)
  @nestAccessControl.UseRoles({
    resource: "SimpleEntity",
    action: "create",
    possession: "any",
  })
  async createSimpleEntity(
    @graphql.Args() args: CreateSimpleEntityArgs
  ): Promise<SimpleEntity> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SimpleEntity)
  @nestAccessControl.UseRoles({
    resource: "SimpleEntity",
    action: "update",
    possession: "any",
  })
  async updateSimpleEntity(
    @graphql.Args() args: UpdateSimpleEntityArgs
  ): Promise<SimpleEntity | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SimpleEntity)
  @nestAccessControl.UseRoles({
    resource: "SimpleEntity",
    action: "delete",
    possession: "any",
  })
  async deleteSimpleEntity(
    @graphql.Args() args: DeleteSimpleEntityArgs
  ): Promise<SimpleEntity | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [DifferentEntity], { name: "differentEntities" })
  @nestAccessControl.UseRoles({
    resource: "DifferentEntity",
    action: "read",
    possession: "any",
  })
  async resolveFieldDifferentEntities(
    @graphql.Parent() parent: SimpleEntity,
    @graphql.Args() args: DifferentEntityFindManyArgs
  ): Promise<DifferentEntity[]> {
    const results = await this.service.findDifferentEntities(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
